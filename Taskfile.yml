version: '3'

tasks:
  install_python:
    cmds:
      - python -m venv python/.venv
      - test -d python/.venv || python3 -m venv python/.venv
      - python/.venv/bin/pip install --upgrade pip
      - python/.venv/bin/pip install -r python/requirements.txt

  install_cpp:
    cmds:
      - echo "Installiere C++-Abhängigkeiten (z.B. mit vcpkg oder apt-get)"
      # - vcpkg install <paket> # Beispiel

  install_backend:
    cmds:
      - npm install --save-dev @types/express @types/socket.io
      - npm install --prefix backend

  install_frontend:
    cmds:
      - npm install --prefix frontend

  install_all:
    deps: [install_python, install_cpp, install_backend, install_frontend]

  build_cpp:
    cmds:
      - cmake -S cpp -B cpp/build
      - cmake --build cpp/build

  test_cpp:
    cmds:
      - ./cpp/build/myTests

  test_python:
    cmds:
      - python/.venv/bin/python python/tests_runner.py

  test_backend:
    cmds:
      - npm test --prefix backend

  test_frontend:
    cmds:
      - npm test --prefix frontend

  test_all:
    deps: [test_cpp, test_python, test_backend, test_frontend]

  # ===== Code-Ausführung =====

  run_python:
    cmds:
      - python/.venv/bin/python python/main.py

  run_cpp:
    cmds:
      - ./cpp/build/main # Passe den Namen ggf. an, z.B. main, app, etc.

  run_backend:
    cmds:
      - npm run dev --prefix backend # Starte TypeScript direkt (ts-node)
      #- npm start --prefix backend

  run_frontend:
    cmds:
      - npm start --prefix frontend

  run_all:
    deps: [run_python, run_backend, run_frontend]

  # ===== Clean-Task =====
  clean:
    cmds:
      - rm -rf cpp/build
      - rm -rf backend/node_modules
      - rm -rf backend/dist
      - rm -rf frontend/node_modules
      - rm -rf backend/tsconfig.tsbuildinfo
      - find python -name "__pycache__" -type d -exec rm -rf {} +
      - find python -name "*.pyc" -delete
      - rm -rf python/venv
      - echo "Alle Build- und Cache-Verzeichnisse entfernt."